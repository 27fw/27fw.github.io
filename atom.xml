<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>firework&#39;s Studio</title>
  
  <subtitle>it&#39;s better to burn out than to fade away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fi3ework.github.io/"/>
  <updated>2017-12-05T15:58:31.378Z</updated>
  <id>https://fi3ework.github.io/</id>
  
  <author>
    <name>Wee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React中的HTML转义写法</title>
    <link href="https://fi3ework.github.io/2017-12-05/React%E4%B8%AD%E7%9A%84%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    <id>https://fi3ework.github.io/2017-12-05/React中的转义字符/</id>
    <published>2017-12-05T14:03:32.000Z</published>
    <updated>2017-12-05T15:58:31.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在JSX中输出固定内容"><a href="#在JSX中输出固定内容" class="headerlink" title="在JSX中输出固定内容"></a>在JSX中输出固定内容</h2><ol><li><p>直接使用UTF-8字符</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;版权 ©&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></li><li><p>使用HTML转义字符</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;版权 &amp;copy;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><p>或者十进制的转义字符</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;版权 &amp;#169;&lt;/div&gt;</div></pre></td></tr></table></figure></li></ol><h2 id="动态内容的转义"><a href="#动态内容的转义" class="headerlink" title="动态内容的转义"></a>动态内容的转义</h2><p>但是如果在外面加一层大括号的话，react为了防止xss会将转义后的字符实体再次转义</p><blockquote><p>React 会将所有要显示到 DOM 的字符串转义，防止 XSS。所以，如果 JSX 中含有转义后的实体字符，比如 &copy;（©），则最后 DOM 中不会正确显示，因为 React 自动把 &copy; 中的特殊字符转义了。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;<span class="string">'版权 &amp;#169;'</span>&#125;&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure><p>错误输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">版权 &amp;#169;</div></pre></td></tr></table></figure><p>正确写法：</p><ol><li><p>直接使用UTF-8字符仍然可以正确输出</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;<span class="string">'版权 ©'</span>&#125;&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></li><li><p>安全的做法是使用对应的Unicode码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;<span class="string">'版权 \u00a9'</span>&#125;&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></li><li><p>使用<code>fromCharCode</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;<span class="string">'版权 '</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">169</span>)&#125;&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></li><li><p>使用数组组装</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;['版权 ', &lt;span&gt;&amp;#169;&lt;/span&gt;]&#125;&lt;/div&gt;</div></pre></td></tr></table></figure></li><li><p>使用<code>dangerouslySetInnerHTML</code>，可以避免React转义字符</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: <span class="string">'版权 &amp;#169;'</span> &#125;&#125; /&gt;</div></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://shripadk.github.io/react/docs/jsx-gotchas.html#html-entities" target="_blank" rel="external">JSX Gotchas</a></li><li><a href="https://book.douban.com/subject/26918038/" target="_blank" rel="external">深入react技术栈</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在JSX中输出固定内容&quot;&gt;&lt;a href=&quot;#在JSX中输出固定内容&quot; class=&quot;headerlink&quot; title=&quot;在JSX中输出固定内容&quot;&gt;&lt;/a&gt;在JSX中输出固定内容&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;直接使用UTF-8字符&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%209/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 9/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 9/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%207/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 7/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 7/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%2011/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 11/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 11/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%206/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 6/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 6/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%205/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 5/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 5/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%2013/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 13/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 13/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%204/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 4/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 4/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%202/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 2/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 2/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%203/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 3/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 3/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%2012/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 12/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 12/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%2010/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 10/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 10/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>为eject后的create-react-app配置ESLint</title>
    <link href="https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint%E7%9A%84%E5%89%AF%E6%9C%AC%208/"/>
    <id>https://fi3ework.github.io/2017-12-03/create-react-app-react-eslint的副本 8/</id>
    <published>2017-12-03T14:27:28.000Z</published>
    <updated>2017-12-04T06:35:31.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>， 默认配置已经很合理了，并且每条配置都有相应的说明，只需要再根据个人喜好修改一些rule即可，我个人修改的.eslintrc.json配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"extends"</span>: [</div><div class="line">        <span class="string">"eslint-config-alloy/react"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"globals"</span>: &#123;</div><div class="line">        // 这里填入你的项目需要的全局变量</div><div class="line">        // 这里值为 false 表示这个全局变量不允许被重新赋值，比如：</div><div class="line">        //</div><div class="line">        // jQuery: false,</div><div class="line">        // $: false</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "indent": [</div><div class="line">            "warn",</div><div class="line">            2,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"SwitchCase"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"flatTernaryExpressions"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        "semi": [</div><div class="line">            "error",</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "react/jsx-indent-props": [</div><div class="line">            "warn",</div><div class="line">            <span class="number">2</span></div><div class="line">        ],</div><div class="line">        "no-unused-vars": [</div><div class="line">            "warn",</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="attr">"args"</span>: <span class="string">"none"</span>,</div><div class="line">                <span class="attr">"caughtErrors"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是在eject之后运行<code>npm start</code>后会直接报错</p><p><img src="/2017-12-03/create-react-app-react-eslint的副本 8/./errorSnap.png" alt="errorImg"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。</p><p>一开始我以为是<a href="https://github.com/AlloyTeam/eslint-config-alloy#react" target="_blank" rel="external">eslint-config-alloy/react</a>的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/react的问题。google之后在一个<a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">issue</a>发现：</p><blockquote><p>By default Eslint errors will raise webpack errors unless you change the config as shown above.</p></blockquote><p>也就是说，ESLint的会在发现error级别错误的时候触发webpack报错，导致编译失败。</p><p>但是为什么在eject之前能通过审查的代码在eject后就遇到error报错了呢？</p><p>简单粗暴我们直接看create-react-app<a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/eslint-config-react-app" target="_blank" rel="external">文档</a>中关于ESLint的部分</p><blockquote><p>If you want to enable even more accessibility rules, you can create an <code>.eslintrc</code> file in the root of your project with this content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;extends&quot;: [&quot;react-app&quot;, &quot;plugin:jsx-a11y/recommended&quot;],</div><div class="line">&gt;   &quot;plugins&quot;: [&quot;jsx-a11y&quot;]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>However, if you are using <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> and have not ejected, any additional rules will only be displayed in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor" target="_blank" rel="external">IDE integrations</a>, but not in the browser or the terminal.</p></blockquote><p>现在回想一下create-react-app中ESLint是如何工作的，终端有warning/error的信息，但是这个打印出来的信息的其实并不是依照eslint-config-alloy/react规则，而是create-react-app的默认规则。在集成在编辑器（我用的VSCode）中的红色波浪线功能则是根据eslint-config-alloy/react规则显示的。</p><p>但是在eject后，编译与波浪提示都根据eslint-config-alloy/react规则进行代码审查，所以eject前根据默认规则审查通过的代码在eject后并不能通过eslint-config-alloy/react的审查报了错。（eslint-config-alloy/react规则真的很严格）。</p><h3 id="ESLint的error该不该直接退出"><a href="#ESLint的error该不该直接退出" class="headerlink" title="ESLint的error该不该直接退出"></a>ESLint的error该不该直接退出</h3><p>在这里还有一个设计思路与使用思路上的冲突：ESLint默认error级别直接报错退出，是因为将某种rule的错误等级定为error时，当出错代码触发了这个rule，就意味着程序根据规则来说已经不对了，就不需要再往后进行编译等等了。所以代码必须先过了ESLint这关（也就是用户自己对代码定下的规则），才能放到babel里去进行编译。（具体的可以看zakas大神关于这个问题的<a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">讨论</a>）</p><p>（我个人之前本来比较喜欢error时不退出，然后选择性的去修改部分有问题的代码，有些报错的代码就不理会等重构的时候再说。但是仔细一想其实违背了ESLint的思想，既然有warning和error的区分，那些不重要的error其实就应该定义为warning。）</p><h3 id="eslint-loader配置问题"><a href="#eslint-loader配置问题" class="headerlink" title="eslint-loader配置问题"></a>eslint-loader配置问题</h3><p>按照ESLint-loader的<a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">文档</a></p><blockquote><p><code>failOnError</code> (default: <code>false</code>)</p><p>Loader will cause the module build to fail if there are any ESLint errors.</p></blockquote><p><code>failOnError</code>默认是<code>false</code>，按照说明应该是不会阻止build。</p><p>ESLint-loader的作者也<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-86513306" target="_blank" rel="external">提到</a>（不过远在2015年3月）</p><blockquote><p>failOn* are off by default to avoid webpack to break the build for “just some linting issues”. So you should not have any error/warning that break the build by default.</p></blockquote><p>然而，实际上build依然失败，具体原因我也不清楚，有几个issue也在反应<code>failOnError</code>不起作用，我猜可能是<code>ESLint-loader</code>没能成功的配置<code>ESLint</code>，这个坑以后仔细研究一下再来填（逃。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>eslint-loader的作者给出的<a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-229417176" target="_blank" rel="external">解决方案</a></p><blockquote><p>Like I said, you can use <code>emitWarning: true</code> option to force all ESLint error/warning being reported as warnings</p></blockquote><p>将<code>emitWarning</code>设为<code>true</code>就可以了，所有的error/warning信息都会打印出来，error也不会阻止编译，简单粗暴。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rules: [&#123;</div><div class="line">  enforce: 'pre',</div><div class="line">  test: /\.jsx?$/,</div><div class="line">  loader: 'ESLint-loader',</div><div class="line">  options: &#123;</div><div class="line">    emitWarning: true</div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>遵照zakas大神的设计思路，报error的就阻止编译，改到通过为止，报warning的就打印出来，个人认为这才是正确遵照ESLint的使用方法。</p><h3 id="方案3（粗暴）"><a href="#方案3（粗暴）" class="headerlink" title="方案3（粗暴）"></a>方案3（粗暴）</h3><p>将<code>./node_modules/ESLint-loader/index.js</code>中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emitter(webpack.version === <span class="number">2</span> ? <span class="keyword">new</span> ESLintError(messages) : messages)</div></pre></td></tr></table></figure><p>直接注释掉！不给ESLint传递任何错误信息，也不会返回错误码了，这样终端永远都是 0 errors 0 warnings（误），错误就只能通过编辑器的红线提示来看了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>Also to note, the actual <em>build</em> still finishes and produces output. This only affects wrappers that would call webpack, such as <code>webpack-dev-server</code> (won’t automatically reload the browser if lint errors exist) or <code>frontend-maven-plugin</code> (will fail the maven build if lint errors exist).</p></blockquote><p>这位仁兄<a href="https://github.com/MoOx/ESLint-loader/issues/148#issuecomment-280712104" target="_blank" rel="external">提到了</a>关于ESLint其实并不会阻止build，只是会在遇到error时阻止像webpack-dev-server这种服务器对浏览器的自动刷新。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/MoOx/ESLint-loader/issues/23#issuecomment-343122777" target="_blank" rel="external">errors cause webpack to not build #23</a></li><li><a href="https://github.com/MoOx/ESLint-loader" target="_blank" rel="external">MoOx/ESLint-loader</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/168#issuecomment-340350264" target="_blank" rel="external">ESLint error causing Webpack to stop watching/building #168</a></li><li><a href="https://github.com/ESLint/ESLint/issues/2949" target="_blank" rel="external">Option to exit with success even if there are errors #2949</a></li><li><a href="https://github.com/MoOx/ESLint-loader/issues/148" target="_blank" rel="external">ESLint-loader with WebPack 2.2 #148</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目一开始使用的是create-react-app创建的，配置的ESLint是用的AlloyTeam的&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="React" scheme="https://fi3ework.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="ESLint" scheme="https://fi3ework.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>页面生命周期：DOMContentLoaded, load, beforeunload, unload</title>
    <link href="https://fi3ework.github.io/2017-10-08/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%9ADOMContentLoaded,%20load,%20beforeunload,%20unload/"/>
    <id>https://fi3ework.github.io/2017-10-08/页面生命周期：DOMContentLoaded, load, beforeunload, unload/</id>
    <published>2017-10-08T07:21:31.000Z</published>
    <updated>2017-12-09T09:42:18.117Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="http://javascript.info/onload-ondomcontentloaded" target="_blank" rel="external">http://javascript.info/onload-ondomcontentloaded</a></p><p>HTML页面的生命周期有以下三个重要事件：</p><ul><li><code>DOMContentLoaded</code> — 浏览器已经完全加载了HTML，DOM树已经构建完毕，但是像是  <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。  </li><li><code>load</code> — 浏览器已经加载了所有的资源（图像，样式表等）。</li><li><code>beforeunload/unload</code> – 当用户离开页面的时候触发。</li></ul><p>每个事件都有特定的用途</p><ul><li><code>DOMContentLoaded</code> – DOM加载完毕，所以js可以访问所有DOM节点，初始化界面。</li><li><code>load</code> – 附加资源已经加载完毕，可以在此事件触发时获得图像的大小（如果没有被在HTML/CSS中指定）</li><li><code>beforeunload/unload</code> – 用户正在离开页面：可以询问用户是否保存了更改以及是否确定要离开页面。</li></ul><p>来看一下每个事件的细节。</p><h2 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h2><p> <code>DOMContentLoaded</code> 由 <code>document</code> 对象触发。</p><p>我们使用 <code>addEventListener</code> 来监听它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, ready);</div></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    alert(<span class="string">'DOM is ready'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// image is not yet loaded (unless was cached), so the size is 0x0</span></span></div><div class="line"><span class="javascript">    alert(<span class="string">`Image size: <span class="subst">$&#123;img.offsetWidth&#125;</span>x<span class="subst">$&#123;img.offsetHeight&#125;</span>`</span>);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, ready);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"https://en.js.cx/clipart/train.gif?speed=1&amp;cache=0"</span>&gt;</span></div></pre></td></tr></table></figure><p>在这个例子中 <code>DOMContentLoaded</code>在document加载完成后就被触发，无需等待其他资源的载入，所以<code>alert</code>输出的图像的大小为0。</p><p>这么看来<code>DOMContentLoaded</code> 似乎很简单，DOM树构建完毕之后就运行该事件，不过其实存在一些陷阱。</p><h3 id="DOMContentLoaded-和脚本"><a href="#DOMContentLoaded-和脚本" class="headerlink" title="DOMContentLoaded 和脚本"></a>DOMContentLoaded 和脚本</h3><p>当浏览器在解析HTML页面时遇到了 <code>&lt;script&gt;...&lt;/script&gt;</code> 标签，将无法继续构建DOM树（译注：UI渲染线程与JS引擎是互斥的，当JS引擎执行时UI线程会被挂起），必须立即执行脚本。所以 <code>DOMContentLoaded</code> 有可能在所有脚本执行完毕后触发。</p><p>外部脚本（带<code>src</code>的）的加载和解析也会暂停DOM树构建，所以 <code>DOMContentLoaded</code> 也会等待外部脚本。</p><p>不过有两个例外是带<code>async</code>和<code>defer</code>的外部脚本，他们告诉浏览器继续解析而不需要等待脚本的执行，所以用户可以在脚本加载完成前可以看到页面，有较好的用户体验。</p><p><code>async</code>和<code>defer</code>属性仅仅对外部脚本起作用，并且他们在<code>src</code>不存在时会被自动忽略。</p><p>它们都告诉浏览器继续处理页面上的内容，而在后台加载脚本，然后在脚本加载完毕后再执行。所以脚本不会阻塞DOM树的构建和页面的渲染。</p><p><strong>（译注：其实这里是不对的，带有<code>async</code>和<code>defer</code>的脚本的下载是和HTML的下载与解析是异步的，但是js的执行一定是和UI线程是互斥的，像下面这张图所示，<code>async</code>在下载完毕后的执行会阻塞HTML的解析）</strong></p><p><img src="https://i.stack.imgur.com/wfL82.png" alt=""></p><p>他们有两处不同：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"><code>async</code></th><th style="text-align:left"><code>defer</code></th></tr></thead><tbody><tr><td style="text-align:left">顺序</td><td style="text-align:left">带有<code>async</code>的脚本是优先执行先加载完的脚本，他们在页面中的顺序并不影响他们执行的顺序。</td><td style="text-align:left">带有<code>defer</code>的脚本按照他们在页面中出现的顺序依次执行。</td></tr><tr><td style="text-align:left"><code>DOMContentLoaded</code></td><td style="text-align:left">带有<code>async</code>的脚本也许会在页面没有完全下载完之前就加载，这种情况会在脚本很小或本缓存，并且页面很大的情况下发生。</td><td style="text-align:left">带有<code>defer</code>的脚本会在页面加载和解析完毕后执行，刚好在  <code>DOMContentLoaded</code><strong>之前</strong>执行。</td></tr></tbody></table><p>所以<code>async</code>用在那些完全不依赖其他脚本的脚本上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">### DOMContentLoaded and styles</div><div class="line"></div><div class="line">External style sheets don't affect DOM, and so `DOMContentLoaded` does not wait for them.</div><div class="line">外部样式表并不会影响DOM，所以`DOMContentLoaded`并不会被他们阻塞。</div><div class="line">But there's a pitfall: if we have a script after the style, then that script must wait for the stylesheet to execute:</div><div class="line">不过仍然有一个陷阱：如果在样式后面有一个内联脚本，那么脚本必须等待样式先加载完。</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// the script doesn't not execute until the stylesheet is loaded</span></span></div><div class="line"><span class="javascript">  <span class="comment">// 脚本直到样式表加载完毕后才会执行。</span></span></div><div class="line"><span class="javascript">  alert(getComputedStyle(<span class="built_in">document</span>.body).marginTop);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>发生这种事的原因是脚本也许会像上面的例子中所示，去得到一些元素的坐标或者基于样式的属性。所以他们自然要等到样式加载完毕才可以执行。</p><p><code>DOMContentLoaded</code>需要等待脚本的执行，脚本又需要等待样式的加载。</p><h3 id="浏览器的自动补全"><a href="#浏览器的自动补全" class="headerlink" title="浏览器的自动补全"></a>浏览器的自动补全</h3><p>Firefox, Chrome和Opera会在<code>DOMContentLoaded</code>执行时自动补全表单。</p><p>例如，如果页面有登录的界面，浏览器记住了该页面的用户名和密码，那么在 <code>DOMContentLoaded</code>运行的时候浏览器会试图自动补全表单（如果用户设置允许）。</p><p>所以如果<code>DOMContentLoaded</code>被一个需要长时间执行的脚本阻塞，那么自动补全也会等待。你也许见过某些网站（如果你的浏览器开启了自动补全）—— 浏览器并不会立刻补全登录项，而是等到整个页面加载完毕后才填充。这就是因为在等待<code>DOMContentLoaded</code>事件。</p><p>使用带<code>async</code>和<code>defer</code>的脚本的一个好处就是，他们不会阻塞<code>DOMContentLoaded</code>和浏览器自动补全。（译注：其实执行还是会阻塞的）</p><h2 id="window-onload"><a href="#window-onload" class="headerlink" title="window.onload"></a>window.onload</h2><p><code>window</code>对象上的<code>onload</code>事件在所有文件包括样式表，图片和其他资源下载完毕后触发。</p><p>下面的例子正确检测了图片的大小，因为<code>window.onload</code>会等待所有图片的加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">    alert(<span class="string">'Page loaded'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// image is loaded at this time</span></span></div><div class="line"><span class="javascript">    alert(<span class="string">`Image size: <span class="subst">$&#123;img.offsetWidth&#125;</span>x<span class="subst">$&#123;img.offsetHeight&#125;</span>`</span>);</span></div><div class="line"><span class="undefined">  &#125;;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"https://en.js.cx/clipart/train.gif?speed=1&amp;cache=0"</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="window-onunload"><a href="#window-onunload" class="headerlink" title="window.onunload"></a>window.onunload</h2><p>用户离开页面的时候，<code>window</code>对象上的<code>unload</code>事件会被触发，我们可以做一些不存在延迟的事情，比如关闭弹出的窗口，可是我们无法阻止用户转移到另一个页面上。</p><p>所以我们需要使用另一个事件 —  <code>onbeforeunload</code>。</p><h2 id="window-onbeforeunload"><a href="#window-onbeforeunload" class="headerlink" title="window.onbeforeunload"></a>window.onbeforeunload</h2><p>如果用户即将离开页面或者关闭窗口时，<code>beforeunload</code>事件将会被触发以进行额外的确认。</p><p>浏览器将显示返回的字符串，举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"There are unsaved changes. Leave now?"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>有些浏览器像Chrome和火狐会忽略返回的字符串取而代之显示浏览器自身的文本，这是为了安全考虑，来保证用户不受到错误信息的误导。</p><h2 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h2><p>如果我们在整个页面加载完毕后设置<code>DOMContentLoaded</code>会发生什么呢？</p><p>啥也没有，<code>DOMContentLoaded</code>不会被触发。</p><p>有一些情况我们无法确定页面上是否已经加载完毕，比如一个带有<code>async</code>的外部脚本的加载和执行是异步的（注：执行并不是异步的-_-）。在不同的网络状况下，脚本有可能是在页面加载完毕后执行也有可能是在页面加载完毕前执行，我们无法确定。所以我们需要知道页面加载的状况。</p><p><code>document.readyState</code>属性给了我们加载的信息，有三个可能的值：</p><ul><li><code>loading</code> 加载 - document仍在加载。</li><li><code>interactive</code> 互动 - 文档已经完成加载，文档已被解析，但是诸如图像，样式表和框架之类的子资源仍在加载。</li><li><code>complete</code> - 文档和所有子资源已完成加载。状态表示 <code>load</code> 事件即将被触发。</li></ul><p>所以我们可以检查 <code>document.readyState</code> 的状态，如果没有就绪可以选择挂载事件，如果已经就绪了就可以直接立即执行。</p><p>像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123; <span class="comment">/*...*/</span> &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">'loading'</span>) &#123;</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, work);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  work();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>每当文档的加载状态改变的时候就有一个<code>readystatechange</code>事件被触发，所以我们可以打印所有的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// current state</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</div><div class="line"></div><div class="line"><span class="comment">// print state changes</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'readystatechange'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState));</div></pre></td></tr></table></figure><p><code>readystatechange</code> 是追踪页面加载的一个可选的方法，很早之前就已经出现了。不过现在很少被使用了，为了保持完整性还是介绍一下它。</p><p><code>readystatechange</code>的在各个事件中的执行顺序又是如何呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">text</span>) </span>&#123; <span class="comment">/* output the time and message */</span> &#125;</span></div><div class="line"><span class="javascript">  log(<span class="string">'initial readyState:'</span> + <span class="built_in">document</span>.readyState);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">'readystatechange'</span>, () =&gt; log(<span class="string">'readyState:'</span> + <span class="built_in">document</span>.readyState));</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; log(<span class="string">'DOMContentLoaded'</span>));</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> log(<span class="string">'window onload'</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"iframe.html"</span> <span class="attr">onload</span>=<span class="string">"log('iframe onload')"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://en.js.cx/clipart/train.gif"</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  img.onload = <span class="function"><span class="params">()</span> =&gt;</span> log(<span class="string">'img onload'</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>输出如下:</p><ol><li>[1] initial readyState:loading</li><li>[2] readyState:interactive</li><li>[2] DOMContentLoaded</li><li>[3] iframe onload</li><li>[4] readyState:complete</li><li>[4] img onload</li><li>[4] window onload</li></ol><p>方括号中的数字表示他们发生的时间，真实的发生时间会更晚一点，不过相同数字的时间可以认为是在同一时刻被按顺序触发（误差在几毫秒之内）</p><ul><li><code>document.readyState</code> 在 <code>DOMContentLoaded</code>前一刻变为<code>interactive</code>，这两个事件可以认为是同时发生。</li><li><code>document.readyState</code> 在所有资源加载完毕后（包括<code>iframe</code>和<code>img</code>）变成<code>complete</code>，我们可以看到<code>complete</code>、 <code>img.onload</code>和<code>window.onload</code>几乎同时发生，区别就是<code>window.onload</code>在所有其他的<code>load</code>事件之后执行。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>页面事件的生命周期：</p><ul><li><code>DOMContentLoaded</code>事件在DOM树构建完毕后被触发，我们可以在这个阶段使用js去访问元素。<ul><li><code>async</code>和<code>defer</code>的脚本可能还没有执行。</li><li>图片及其他资源文件可能还在下载中。</li></ul></li><li><code>load</code>事件在页面所有资源被加载完毕后触发，通常我们不会用到这个事件，因为我们不需要等那么久。</li><li><code>beforeunload</code>在用户即将离开页面时触发，它返回一个字符串，浏览器会向用户展示并询问这个字符串以确定是否离开。</li><li><code>unload</code>在用户已经离开时触发，我们在这个阶段仅可以做一些没有延迟的操作，由于种种限制，很少被使用。</li><li><code>document.readyState</code>表征页面的加载状态，可以在<code>readystatechange</code>中追踪页面的变化状态：<ul><li><code>loading</code> — 页面正在加载中。</li><li><code>interactive</code> – 页面解析完毕，时间上和 <code>DOMContentLoaded</code>同时发生，不过顺序在它之前。</li><li><code>complete</code> – 页面上的资源都已加载完毕，时间上和<code>window.onload</code>同时发生，不过顺序在他之前。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;http://javascript.info/onload-ondomcontentloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascript.info/onload-ondomcontent
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
      <category term="浏览器" scheme="https://fi3ework.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-archer</title>
    <link href="https://fi3ework.github.io/2017-08-14/hexo-theme-archer/"/>
    <id>https://fi3ework.github.io/2017-08-14/hexo-theme-archer/</id>
    <published>2017-08-13T16:02:12.000Z</published>
    <updated>2017-11-04T09:02:03.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017-08-14/hexo-theme-archer/snap.png" alt="preview"></p><p>安装及使用方法见GitHub地址: <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="external">戳我:)</a></p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>如果有任何使用上的问题或者疑问，欢迎留言</p><p>感谢使用😆</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017-08-14/hexo-theme-archer/snap.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;p&gt;安装及使用方法见GitHub地址: &lt;a href=&quot;https://github.com/fi3ework/hexo-theme-archer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;戳我:)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;帮助&quot;&gt;&lt;a href=&quot;#帮助&quot; class=&quot;headerlink&quot; title=&quot;帮助&quot;&gt;&lt;/a&gt;帮助&lt;/h2&gt;&lt;p&gt;如果有任何使用上的问题或者疑问，欢迎留言&lt;/p&gt;
&lt;p&gt;感谢使用😆&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://fi3ework.github.io/tags/hexo/"/>
    
      <category term="hexo-theme-archer" scheme="https://fi3ework.github.io/tags/hexo-theme-archer/"/>
    
  </entry>
  
  <entry>
    <title>client/scroll/offset width/height总结</title>
    <link href="https://fi3ework.github.io/2017-06-21/client:scroll:offset%20width:height%E6%80%BB%E7%BB%93/"/>
    <id>https://fi3ework.github.io/2017-06-21/client:scroll:offset width:height总结/</id>
    <published>2017-06-21T13:08:51.000Z</published>
    <updated>2017-06-21T15:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="Element-clientHeight-amp-Element-clientWidth"><a href="#Element-clientHeight-amp-Element-clientWidth" class="headerlink" title="Element.clientHeight &amp; Element.clientWidth"></a>Element.clientHeight &amp; Element.clientWidth</h4><h5 id="element-clientHeight（只读）"><a href="#element-clientHeight（只读）" class="headerlink" title="element.clientHeight（只读）"></a>element.clientHeight（只读）</h5><blockquote><p>返回元素内部的高度(单位像素)，包含内边距，但不包括水平滚动条、边框和外边距。</p><p><code>clientHeight</code> 可以通过 CSS <code>height</code> + CSS <code>padding</code> - 水平滚动条高度 (如果存在)来计算.</p><h5 id="Element-clientWidth（只读）"><a href="#Element-clientWidth（只读）" class="headerlink" title="Element.clientWidth（只读）"></a>Element.clientWidth（只读）</h5><p><code>Element.clientWidth</code> 属性表示元素的内部宽度，以像素计。该属性<strong>包括内边距，但不包括垂直滚动条（如果有的话）、边框和外边距</strong>。</p></blockquote><p><img src="https://developer.mozilla.org/@api/deki/files/185/=Dimensions-client.png" alt="element.clientHeight"></p></li><li><h4 id="Element-clientLeft（只读）-amp-Element-clientTop（只读）"><a href="#Element-clientLeft（只读）-amp-Element-clientTop（只读）" class="headerlink" title="Element.clientLeft（只读）&amp; Element.clientTop（只读）"></a>Element.clientLeft（只读）&amp; Element.clientTop（只读）</h4><blockquote><p>表示一个元素的左边框的宽度，以像素表示。如果元素的文本方向是从右向左（RTL, right-to-left），并且由于内容溢出导致左边出现了一个垂直滚动条，则该属性包括滚动条的宽度。<strong><code>clientLeft</code> 不包括左外边距和左内边距</strong>。<code>clientLeft</code> 是只读的。</p><p>一个元素顶部边框的宽度（以像素表示）。不包括顶部外边距或内边距。<code>clientTop</code> 是只读的。</p></blockquote></li><li><h4 id="Element-scrollTop（读写）"><a href="#Element-scrollTop（读写）" class="headerlink" title="Element.scrollTop（读写）"></a>Element.scrollTop（读写）</h4><blockquote><p><code>这个Element.scrollTop</code> 属性可以设置或者获取一个元素距离他容器顶部的像素距离。一个元素的 <code>scrollTop</code> 是可以去计算出这个<strong>元素距离它容器顶部的可见高度</strong>。当一个元素的容器没有产生垂直方向的滚动条,那它的 <code>scrollTop 的值默认为0</code>.</p></blockquote><ul><li>如果一个元素不能被滚动 (e.g. 它没有溢出容器或者 这个元素是不可滚动的), <code>scrollTop被设置为0</code>.</li><li>设置scrollTop的值小于0，<code>scrollTop</code> 被设为<code>0</code></li><li><p>如果设置了超出这个容器可滚动的值, <code>scrollTop</code> 会被设为最大值.</p><p><img src="https://developer.mozilla.org/@api/deki/files/842/=ScrollTop.png" alt="element.scrollTop"></p></li></ul></li><li><h4 id="Element-scrollLeft（读写）"><a href="#Element-scrollLeft（读写）" class="headerlink" title="Element.scrollLeft（读写）"></a>Element.scrollLeft（读写）</h4><blockquote><p> <strong>Element.scrollLeft</strong> 属性可以读取或设置元素滚动条到元素左边的距离。注意如果这个元素的内容排列方向（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/direction" target="_blank" rel="external"><code>direction</code></a>） 是<code>rtl</code> (right-to-left) ，那么滚动条会位于最右侧（内容开始处），并且scrollLeft值为0。此时，当你从右到左拖动滚动条时，scrollLeft会从0变为负数（这个特性在chrome浏览器中不存在）。</p></blockquote><ul><li>如果元素不能滚动（比如：元素没有溢出），那么<code>scrollLeft</code> 的值是0。</li><li>如果给<code>scrollLeft</code> 设置的值小于0，那么<code>scrollLeft</code> 的值将变为0。</li><li>如果给<code>scrollLeft</code> 设置的值大于元素内容最大宽度，那么<code>scrollLeft</code> 的值将被设为元素最大宽度。</li></ul></li><li><h4 id="ELement-scrollHeight（只读）-amp-Element-scrollHeigt（只读）"><a href="#ELement-scrollHeight（只读）-amp-Element-scrollHeigt（只读）" class="headerlink" title="ELement.scrollHeight（只读） &amp; Element.scrollHeigt（只读）"></a>ELement.scrollHeight（只读） &amp; Element.scrollHeigt（只读）</h4><blockquote><p><code>Element.scrollHeight</code> 是计量元素内容高度的只读属性，包括overflow样式属性导致的视图中不可见内容。没有垂直滚动条的情况下，scrollHeight值与元素视图填充所有内容所需要的最小值clientHeight相同。<strong>包括元素的padding，但不包括元素的margin.</strong></p><p><strong>Element.scrollHeight</strong> 是计量元素内容高度的只读属性，包括overflow样式属性导致的视图中不可见内容。没有垂直滚动条的情况下，scrollHeight值与元素视图填充所有内容所需要的最小值clientHeight相同。包括元素的padding，但不包括元素的margin.</p></blockquote></li></ul><p><img src="https://developer.mozilla.org/@api/deki/files/840/=ScrollHeight.png" alt="element.scrollHeight"></p><ul><li><h4 id="HTMLElement-offsetHegiht（只读）-amp-HTMLElement-offsetWidth（只读）"><a href="#HTMLElement-offsetHegiht（只读）-amp-HTMLElement-offsetWidth（只读）" class="headerlink" title="HTMLElement.offsetHegiht（只读）&amp; HTMLElement.offsetWidth（只读）"></a>HTMLElement.offsetHegiht（只读）&amp; HTMLElement.offsetWidth（只读）</h4><blockquote><p>HTMLElement.offsetHeight 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</p><p>通常，<strong>元素的offsetHeight是一种衡量标准，包括元素的边框、垂直内边距和元素的水平滚动条（如果存在且渲染的话）和元素的CSS高度。</strong></p><p>对于文档的主体对象，它包括代替元素的CSS高度线性总含量高。浮动元素的向下延伸内容高度是被忽略的。 </p><p><strong>HTMLElement.offsetWidth</strong> 是一个只读属性，返回一个元素的布局宽度。一个典型的（译者注：各浏览器的offsetWidth可能有所不同）<strong>offsetWidth是测量元素的边框(border)、水平线上的内边距(padding)、竖直方向滚动条(scroolbar)（如果存在的话）、以及CSS设置的宽度(width)的值。</strong></p></blockquote></li></ul><p><img src="https://developer.mozilla.org/@api/deki/files/186/=Dimensions-offset.png" alt="HTMLElement.offsetHegiht"></p><ul><li><h4 id="HTMLElement-offsetParent（只读）"><a href="#HTMLElement-offsetParent（只读）" class="headerlink" title="HTMLElement.offsetParent（只读）"></a><strong>HTMLElement.offsetParent</strong>（只读）</h4><blockquote><p><strong>HTMLElement.offsetParent</strong> 是一个只读属性，返回一个指向最近的（closest，指包含层级上的最近）包含该元素的定位元素。如果没有定位的元素，则 <code>offsetParent</code> 为最近的 <code>table</code>元素对象或根元素（标准模式下为 <code>html</code>；quirks 模式下为 <code>body</code>）。当元素的 <code>style.display</code> 设置为 “none” 时，<code>offsetParent</code> 返回 <code>null</code>。<code>offsetParent</code> 很有用，<strong>因为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetTop" target="_blank" rel="external"><code>offsetTop</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetLeft" target="_blank" rel="external"><code>offsetLeft</code></a> 都是相对于其内边距边界的。</strong></p></blockquote><h5 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h5><p>   在 Webkit 中，如果元素为隐藏的（该元素或其祖先元素的 <code>style.display</code> 为 “none”），或者该元素的 <code>style.position</code> 被设为 “fixed”，则该属性返回 <code>null</code>。</p><p>   在 IE 9 中，如果该元素的 <code>style.position</code> 被设置为 “fixed”，则该属性返回 <code>null</code>。（<code>display:none</code> 无影响。）</p></li><li><h4 id="HTMLElement-offsetLeft（只读）-amp-HTMLElement-offsetTop（只读）"><a href="#HTMLElement-offsetLeft（只读）-amp-HTMLElement-offsetTop（只读）" class="headerlink" title="HTMLElement.offsetLeft（只读）&amp; HTMLElement.offsetTop（只读）"></a>HTMLElement.offsetLeft（只读）&amp; HTMLElement.offsetTop（只读）</h4><blockquote><p> <strong>HTMLElement.offsetLeft</strong> 是一个只读属性，返回当前元素<em>左上角</em>相对于  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent" target="_blank" rel="external"><code>HTMLElement.offsetParent</code></a> 节点的左边界<strong>（内边距边界）</strong>偏移的像素值。</p><p> 对块级元素来说，<code>offsetTop</code>、<code>offsetLeft</code>、<code>offsetWidth</code> 及 <code>offsetHeight</code> 描述了元素相对于 <code>offsetParent</code> 的边界框。</p><p> 然而，对于可被截断到下一行的行内元素（如 <strong>span</strong>），<code>offsetTop</code> 和 <code>offsetLeft</code> 描述的是<em>第一个</em>边界框的位置（使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getClientRects" target="_blank" rel="external"><code>Element.getClientRects()</code></a> 来获取其宽度和高度），而 <code>offsetWidth</code> 和 <code>offsetHeight</code> 描述的是边界框的维度（使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="external"><code>Element.getBoundingClientRect</code></a> 来获取其位置）。因此，使用 <code>offsetLeft、offsetTop、offsetWidth</code>、<code>offsetHeight</code> 来对应 left、top、width 和 height 的一个盒子将不会是文本容器 span 的盒子边界。</p><p><strong>HTMLElement.offsetTop</strong> 为只读属性，它返回当前元素相对于其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent" target="_blank" rel="external"><code>offsetParent</code></a> 元素的顶部的距离。</p></blockquote></li></ul><h3 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h3><p><img src="https://i.stack.imgur.com/zWca7.png" alt="Microsoft has a nice image in the MSDN:"></p><p><img src="https://i.stack.imgur.com/5AAyW.png" alt=""></p><p><img src="http://pic002.cnblogs.com/images/2011/85285/2011102915280329.jpg" alt=""><br><img src="https://i.stack.imgur.com/NANud.png" alt=""> <img src="https://i.stack.imgur.com/RFxSh.png" alt=""></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><code>clientHegiht</code> <code>clientWidth</code>：包括padding，不包括border的可见区域大小，不能通过CSS计算得到大小，因为不知道滚动条的大小。</li></ul><ul><li><p><code>offsetHeight</code> <code>offsetWidth</code>：包括border， padding和滚动条的可见区域大小，可以通过<code>width + padding</code>得到大小。</p></li><li><p><code>scrollHeight</code> <code>scrollWidth</code>，页面内容的总长度，<strong>不包括border</strong>，不能通过CSS计算大小。</p><p>​</p></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><p>判断滚动元素是否到底（比如安装软件时的协议条款）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.scrollHeight - element.scrollTop === element.clientHegiht;</div></pre></td></tr></table></figure></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>MDN</li></ul><ul><li><a href="https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" target="_blank" rel="external">Understanding offsetWidth, clientWidth, scrollWidth and -Height, respectively</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Element-clientHeight-amp-Element-clientWidth&quot;&gt;&lt;a href=&quot;#Element-clientHeight-amp-Element-clientWidth&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://fi3ework.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>SASS的map</title>
    <link href="https://fi3ework.github.io/2017-06-19/SASS%E7%9A%84map/"/>
    <id>https://fi3ework.github.io/2017-06-19/SASS的map/</id>
    <published>2017-06-19T14:55:21.000Z</published>
    <updated>2017-06-21T15:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在看SASS中文网时发现<code>Maps</code>没有翻译，就顺便翻译一下。</p><blockquote><h4 id="6-3-3-Maps"><a href="#6-3-3-Maps" class="headerlink" title="6.3.3. Maps"></a>6.3.3. Maps</h4><p>Maps represent an association between keys and values, where keys are used to look up values. They make it easy to collect values into named groups and access those groups dynamically. They have no direct parallel in CSS, although they’re syntactically similar to media query expressions: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; scss $map: (key1: value1, key2: value2, key3: value3);</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p> Unlike lists, maps must always be surrounded by parentheses and must always be comma-separated. Both the keys and values in maps can be any SassScript object. A map may only have one value associated with a given key (although that value may be a list). A given value may be associated with many keys, though. Like lists, maps are mostly manipulated using SassScript functions. The map-get function looks up values in a map and the map-merge function adds values to a map. The @each directive can be used to add styles for each key/value pair in a map. The order of pairs in a map is always the same as when the map was created. Maps can also be used anywhere lists can. When used by a list function, a map is treated as a list of pairs. For example, (key1: value1, key2: value2) would be treated as the nested list key1 value1, key2 value2 by list functions. Lists cannot be treated as maps, though, with the exception of the empty list. () represents both a map with no key/value pairs and a list with no elements. Note that map keys can be any Sass data type (even another map) and the syntax for declaring a map allows arbitrary SassScript expressions that will be evaluated to determine the key. Maps cannot be converted to plain CSS. Using one as the value of a variable or an argument to a CSS function will cause an error. Use the inspect($value) function to produce an output string useful for debugging maps.</p></blockquote><p><strong>翻译如下：</strong></p><p>Maps代表键值对之间的映射，通过key来索引value。这使得可以很容易的将值集合在对象中并且能够动态的更新对象。CSS语法中没有直接与Map对应的语法，尽管Map的语法很像是<code>media query</code>表达式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scss <span class="variable">$map</span>: (key1: value1, key2: value2, key3: value3);</div></pre></td></tr></table></figure><p>与list不同，map必须包含在一对圆括号中，也必须使用逗号分隔。键与值可以为ScssScript中的 任何对象。在一个map中，一个key只能对应一个value（value可以是list），但一个value可以对应多个key。与list类似，map一般用来进行ScssScript的操作，<code>map-get</code>函数用来在map中索引，<code>map-merge</code>函数用来向map添加键值对。<code>@each</code>命令可以给map中的键值对添加样式。map中键值对的顺序取决于创建时的顺序。凡是可以使用list的地方都可以使用map，当list的函数操作map时，会将map看做一个由键值对组成的数组。比如<code>(key1: value1, key2: value2)</code>会被看成嵌套的list：<code>[key1, value1],[key2, value2]</code>（待定）。但是list不能被当做map使用，除了空数组。<code>()</code>既代表一个空数组也代表一个没有键值对的map。key可以为任何的Sass数据格式（可以是另一个map）。Map不能直接转换为CSS语法，当被CSS函数当做值或者变量或者参数时将会导致错误，使用<code>inspect($value)</code>函数可以用来生成调试map的字符串函数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在看SASS中文网时发现&lt;code&gt;Maps&lt;/code&gt;没有翻译，就顺便翻译一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;6-3-3-Maps&quot;&gt;&lt;a href=&quot;#6-3-3-Maps&quot; class=&quot;headerlink&quot; title=&quot;6.3.3. 
      
    
    </summary>
    
    
      <category term="SASS" scheme="https://fi3ework.github.io/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>CSS常用布局方式</title>
    <link href="https://fi3ework.github.io/2017-06-09/CSS%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"/>
    <id>https://fi3ework.github.io/2017-06-09/CSS常用布局方式/</id>
    <published>2017-06-08T17:03:46.000Z</published>
    <updated>2017-06-10T14:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高度相等的列"><a href="#高度相等的列" class="headerlink" title="高度相等的列"></a>高度相等的列</h3><p>  <img src="/2017-06-09/CSS常用布局方式/./CSS常用布局方式/高度相等的列.png" alt="高度相等的列"></p><p>  思路：三列浮动布局，给每列一个很大的<code>padding-bottom</code>，然后每列的<code>margin-bottom</code>比<code>padding-bottom</code>稍小，外面包裹的<code>wrapper</code>就会被最高的一列撑起来。</p><p>  代码：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">background-color</span>: orange;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">520px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">500px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Andy Budd<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Andy is the Managing Director of Clearleft. He also goes by the title of User Experience Director depending what mood</div><div class="line">      he’s in. Andy is the author of CSS Mastery, curates the dConstruct and UX London events and is responsible for Silverbackapp,</div><div class="line">      our low cost usability testing application for the Mac.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Richard Rutter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Richard is a founding partner and the production director for Clearleft. He has been designing websites and web applications</div><div class="line">      since the birth of the commercial web, over twelve years ago. Richard leads the user experience team at Clearleft, pioneering</div><div class="line">      innovative approaches to designing fantastic experiences for clients and their customers.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Jeremy Keith<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Jeremy is a hugely experienced developer specialising in XHTML, CSS, Javascript and PHP-driven solutions. Jeremy is technical</div><div class="line">      director at Clearleft.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="解决浮动元素溢出问题"><a href="#解决浮动元素溢出问题" class="headerlink" title="解决浮动元素溢出问题"></a>解决浮动元素溢出问题</h3><ul><li><p>在外围<code>div</code>底部添加一个<code>&lt;br /&gt;</code>然后设定<code>br {clear: both};</code>（需要添加额外的html）。</p></li><li><p>将外围div设定为<code>float</code>（但是容器后面的的元素要设定<code>clear</code>）</p></li><li><p>将外围块设定为<code>overflow: hidden;</code>， <code>overhidden</code>会强制外围块放大到包含浮动元素，如果是ie6及之前的浏览器，再添加<code>zoom: 1;</code>不过如果<code>div</code>中有绝对定位的元素时，可能显现不出来。</p></li><li><p>使用简单清除法（需要添加额外的html）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 清理浮动 */</span>  </div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  </div><div class="line">    <span class="attribute">content</span>:<span class="string">""</span>;  </div><div class="line">    <span class="attribute">display</span>:block;  </div><div class="line">    <span class="attribute">height</span>:<span class="number">0</span>;  </div><div class="line">    <span class="attribute">font-size</span>:<span class="number">0</span>;  </div><div class="line">    <span class="attribute">clear</span>:both;  </div><div class="line">    <span class="attribute">visibility</span>:hidden;  </div><div class="line">&#125;  </div><div class="line"><span class="selector-class">.clearfix</span> &#123;  </div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;高度相等的列&quot;&gt;&lt;a href=&quot;#高度相等的列&quot; class=&quot;headerlink&quot; title=&quot;高度相等的列&quot;&gt;&lt;/a&gt;高度相等的列&lt;/h3&gt;&lt;p&gt;  &lt;img src=&quot;/2017-06-09/CSS常用布局方式/./CSS常用布局方式/高度相等的列.p
      
    
    </summary>
    
    
  </entry>
  
</feed>
